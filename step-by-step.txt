python -m venv ./env
cd .\env\
.\Scripts\activate
pip install flask
python -m flask --version
pip freeze > requeriments.txt

---------------
app.py

from flask import Flask

app = Flask(__name__)

@app.route('/')
def index():
    return '<h1>hello, world</h1>'


** set FLASK_APP = app.py //erro
flask run

---------------
criar doc html(como template)

renderizar template

templates ou rotas dinamicas

============html===========

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Flask - Index</title>
</head>
<body>
    <h1>Hello, {% if name %} {{name}} {% endif %}</h1>
    
</body>
</html>

============ app.py ==============

from flask import Flask, render_template

app = Flask(__name__)

@app.route('/user')
@app.route('/user/<name>')
def index(name=None):
    print(name)
    return render_template("index.html",name=name)

app.run(debug=True)

--------------------------------------

instalar dependencia -> pip install flask-wtf

atualizar requeriments

importa as dependencia

criar classe formulario

renderizou o formulario

devolveu dados recebidos no template

refactor do formulario

=====================================

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Flask - Index</title>
</head>
<body>
    <h1>Hello, {% if name %} {{name}} {% endif %}</h1>

    <form method="POST">
        {{form.hidden_tag()}}
        {{form.name.label}} {{ form.name}}
        {{form.submit}}
    </form>
    
</body>
</html>

====================================

from flask import Flask, render_template
from form import NameForm

app = Flask(__name__)

app.config['SECRET_KEY'] = "abc123"


# @app.route('/user')
# @app.route('/user/<name>')
@app.route('/', methods=['GET', 'POST'])
def index(name=None):
    # print(name)

    name = None
    form = NameForm()
    if form.validate_on_submit():
        name = form.name.data
        form.name.data = " "

    return render_template("index.html",name=name, form=form)

app.run(debug=True)

=======================================

from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
from wtforms.validators import DataRequired

class NameForm(FlaskForm):
    name = StringField('Qual é o seu nome?', validators=[DataRequired()])
    submit = SubmitField('Submit')

=====================================

========config.py=======

import os

SECRET_KEY = os.urandom(32)

basedir = os.path.abspath(os.path.dirname(__file__))

DEBUG = True

SQLALCHEMY_DATABASE_URI = 'sqlite:////' + os.path.join(basedir, 'data.db')

SQLALCHEMY_TRACK_MODIFICATIONS = False

=====================

pip install Flask-Migrate
pip install flask-sqlalchemy

=== user.py ====

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(30))
    age = db.Column(db.String(30))
    address = db.Column(db.String(120))

    def serialize(self):
        return{
            'id': self.id,
            'name': self.name,
            'age': self.age,
            'address': self.address
        }

================================

===============app.py===============

from flask import Flask, render_template
from form import NameForm
from flask_migrate import Migrate
from models.User import db

app = Flask(__name__)

app.config.from_object('config')

db.init_app(app)

migrate = Migrate(app,db)

# @app.route('/user')
# @app.route('/user/<name>')
@app.route('/', methods=['GET', 'POST'])
def index(name=None):
    # print(name)

    name = None
    form = NameForm()
    if form.validate_on_submit():
        name = form.name.data
        form.name.data = " "

    return render_template("index.html",name=name, form=form)

app.run(debug=True)

==============================
refactor das configuracoes

instalamos o pacote de migracoes (pip install Flask-Migrate)

instalamos o pacote de orm (pip install flask-sqlalchemy)

criamos o User

----------------------------------

# rodar:
    # flask db init
    # flask db migrate
    # flask db upgrade

----------
importamos o banco de dados no dbeaver

utilizar dbeaver para visualizar as tabelas (migraçoes, user)

----------

